// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
vec4 pos_in[3], normal_in ;
float x, y, z ;

mat4 s, t, r ; 


s = uniform_scale(0.3) * model(is_moon, animation_seconds) ;
t = translate(vec3(2,0,2)) ;
r = rotate_about_y(0.5*animation_seconds*M_PI) ;

normal_in = interpolate(gl_TessCoord, normalize(pos_es_in[0]), normalize(pos_es_in[1]), normalize(pos_es_in[2]));
normal_fs_in = normalize(normal_in.xyz) ;
sphere_fs_in = vec3(s*t*vec4(normal_fs_in,1.0));

if (is_moon) {    
    view_pos_fs_in = view*s*t*vec4(normal_fs_in,1.0) ;
	pos_fs_in = proj * view_pos_fs_in ;
}
else {
    view_pos_fs_in = view*vec4(normal_fs_in,1.0) ;
	pos_fs_in = proj * view_pos_fs_in ;
}

   gl_Position = pos_fs_in;

  /////////////////////////////////////////////////////////////////////////////
}


